"""
    Copyright 2021 t.me/hikariatama
    Licensed under the Apache License, Version 2.0
    
    Author is not responsible for any consequencies caused by using this
    software or any of its parts. If you have any questions or wishes, feel
    free to contact Dan by sending pm to @hikari_alt.
"""

#<3 title: MagicBroom
#<3 pic: https://img.icons8.com/fluency/48/000000/broom.png
#<3 desc: –í–æ–ª—à–µ–±–Ω–∞—è –º–µ—Ç–ª–∞ –≤—ã–º–µ—Ç–µ—Ç –≤–µ—Å—å —Ö–ª–∞–º –∏–∑ —Ç–≤–æ–µ–π —Ç–µ–ª–µ–≥–∏

from .. import loader, utils
import asyncio
import re
import telethon
import requests
import json


@loader.tds
class MagicBroomMod(loader.Module):
    """–í–æ–ª—à–µ–±–Ω–∞—è –º–µ—Ç–ª–∞ –≤—ã–º–µ—Ç–µ—Ç –≤–µ—Å—å —Ö–ª–∞–º –∏–∑ —Ç–≤–æ–µ–π —Ç–µ–ª–µ–≥–∏"""
    strings = {'name': 'MagicBroom',
    'no_args': "ü¶ä <b>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã </b><code>.help MagicBroom</code>",
    'will_be_removed': '<b>ü¶ä –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {} –¥–∏–∞–ª–æ–≥–æ–≤:</b>\n<pre>   üî∏ {}</pre>\n\nüî∞ –ö–æ–º–∞–Ω–¥–∞: <code>.broom {}</code>', 
    'nothing_will_be_removed': '<b>ü¶ä –ù–∏ –æ–¥–∏–Ω —á–∞—Ç –Ω–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω</b>', 
    'fuck_off': 'ü¶ä <b>–Ø –Ω–µ —Ö–æ—á—É –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ç–µ–±—è, –ø–æ—ç—Ç–æ–º—É —Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.</b>',
    'removed': '<b>ü¶ä –£–¥–∞–ª–µ–Ω–æ {} –¥–∏–∞–ª–æ–≥–æ–≤:</b>\n<pre>   üî∏ {}</pre>',
    'nothing_removed': '<b>ü¶ä –ù–∏ –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ</b>', 
    'broom_file': "\n‚úÖ –£–¥–∞–ª–µ–Ω–æ {} –∫–æ–Ω—Ñ–∏–≥–æ–≤ –º–æ–¥—É–ª–µ–π, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞", 
    'broom_deadrepos': "\n‚úÖ –£–¥–∞–ª–µ–Ω–æ {} –º–µ—Ä—Ç–≤—ã—Ö —Ä–µ–ø–æ", 
    'broom_refactorrepos': "\n‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ {} —Å—Ç–∞—Ä—ã—Ö —Ä–µ–ø–æ", 
    'broom_deletedconfs': "\n‚úÖ –£–¥–∞–ª–µ–Ω–æ {} –∫–æ–Ω—Ñ–∏–≥–æ–≤ –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π",
    'processing': '<b>ü¶ä –°–µ–∫—É–Ω–¥—É...</b>',
    'result': '<b>ü¶ä –†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n'
    }
    
    async def client_ready(self, client, db):
        self.db = db
        self.client = client

    async def broom(self, message):
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings('no_args', message))
            await asyncio.sleep(3)
            await message.delete()
            return False

        deleted, restricted, scam, query = False, False, False, False

        if '-d' in args:
            args = args.replace('-d', '').replace('  ', ' ')
            deleted = True
        
        if '-b' in args:
            args = args.replace('-b', '').replace('  ', ' ')
            restricted = True
        
        if '-s' in args:
            args = args.replace('-s', '').replace('  ', ' ')
            scam = True

        if '-q' in args:
            query = re.search(r'-q [\'"]?([^ ]*)[\'"]?', args).group(1)

        dialogs = await self.client.get_dialogs()
        todel = []
        for dialog in dialogs:
            if 'friendly' in dialog.name.lower():
                continue

            if scam and getattr(dialog.entity, "scam", False) or restricted and getattr(dialog.entity, "restricted", False) or deleted and getattr(dialog.entity, "deleted", False) or query and (query.lower() in dialog.name.lower() or re.match(query, dialog.name) is not None):
                todel.append(dialog)

        return todel

    async def broompcmd(self, message):
        """<args> - –í–æ–ª—à–µ–±–Ω–∞—è —á–∏—Å—Ç–∫–∞ —Ç–µ–ª–µ–≥–∏ (–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —á–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã)"""
        ans = await self.broom(message)
        if ans is False:
            return
        if len(ans) > 0:
            chats = "\n   üî∏ ".join([d.name for d in ans])
            await utils.answer(message, self.strings('will_be_removed', message).format(len(ans), chats, message.text[7:]))
        else:
            await utils.answer(message, self.strings('nothing_will_be_removed', message))

    async def broomcmd(self, message):
        """<args> - –í–æ–ª—à–µ–±–Ω–∞—è —á–∏—Å—Ç–∫–∞ —Ç–µ–ª–µ–≥–∏
        -d - –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        -b - –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        -s - –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å–æ —Å–∫–∞–º –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        -q <–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å> - –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—É"""
        ans = await self.broom(message)
        if ans is False:
            return

        [await self.client.delete_dialog(d.entity) for d in ans]
        if len(ans) > 0:
            chats = "\n   üî∏ ".join([d.name for d in ans])
            await utils.answer(message, self.strings('removed', message).format(len(ans), chats))
        else:
            await utils.answer(message, self.strings('nothing_removed', message))


    async def washdbcmd(self, message):
        """<arg> - –ü–æ–º—ã—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è .backupdb)
        -1 --filemods - –£–±—Ä–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏ –º–æ–¥—É–ª–µ–π, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
        -2 --deadrepos - –£–±—Ä–∞—Ç—å –º–µ—Ä—Ç–≤—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        -3 --refactorrepos - –ó–∞–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫–∏ githubusercontent —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ
        -4 --deleteconf - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏ –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        -a --all - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
        args = utils.get_args_raw(message)
        await utils.answer(message, self.strings('processing', message))


        if '-a' in args or '--all' in args:
            args = '-1 -2 -3 -4'

        res = self.strings('result')
        if '--filemods' in args or '-1' in args:
            todel = [x for x in self.db.keys() if "__extmod" in x or 'filemod_' in x]
            for delete in todel:
                self.db.pop(delete)

            res += self.strings('broom_file', message).format(len(todel))

        if '--deadrepos' in args or '-2' in args:
            counter = 0
            mods = []
            for mod in self.db.get("friendly-telegram.modules.loader", "loaded_modules"):
                if ('http://' in mod or 'https://' in mod) and requests.get(mod).status_code == 404:
                    counter += 1
                else:
                    mods.append(mod)

            self.db.set('friendly-telegram.modules.loader', 'loaded_modules', mods)
            res += self.strings('broom_deadrepos', message).format(counter)

        if '--refactorrepos' in args or '-3' in args:
            counter = json.dumps(self.db).count('githubusercontent')
            mods = re.sub(r'http[s]?:\/\/raw\.githubusercontent\.com\/([^\/]*?\/[^\/]*?)(\/[^\"\']*)', r'https://github.com/\1/raw\2', re.sub(r'http[s]?:\/\/raw%dgithubusercontent%dcom\/([^\/]*?\/[^\/]*?)(\/[^\"\']*)', r'https://github%dcom/\1/raw\2', json.dumps(self.db), flags=re.S), flags=re.S)
            self.db.clear()
            self.db.update(**json.loads(mods))

            res += self.strings('broom_refactorrepos', message).format(counter)

        if '--deleteconf' in args or '-4' in args:
            todel = []
            for x in self.db.keys(): 
                if x.startswith('friendly-telegram.modules.'):
                    link = x.split('.', 3)[2].replace('%d', '.')
                    if link not in self.db.get("friendly-telegram.modules.loader", "loaded_modules") and link != 'loader':
                        todel.append(x)

            for delete in todel:
                self.db.pop(delete)


            res += self.strings('broom_deletedconfs', message).format(len(todel))

        if res == self.strings('result'):
            res += "–ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å"

        self.db.save()
        await utils.answer(message, res)


    async def pbancmd(self, message):
        """<–≤ —á–∞—Ç–µ> <args> - –£–¥–∞–ª—è–µ—Ç —á–∞—Ç \\ –±–ª–æ–∫–∏—Ä—É–µ—Ç –±–æ—Ç–∞ \\ –±–ª–æ–∫–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞
        -h - –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
        -hh - –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ–±–æ–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤"""
        args = utils.get_args_raw(message)
        entity = await self.client.get_entity(message.peer_id)
        if type(entity) is telethon.tl.types.User:
            try:
                if '-hh' in args:
                    await self.client(telethon.tl.functions.messages.DeleteHistoryRequest(
                        peer=entity, 
                        just_clear=False,
                        revoke=True,
                        max_id=0
                    ))
                elif '-h' in args:
                    await self.client(telethon.tl.functions.messages.DeleteHistoryRequest(
                        peer=entity, 
                        just_clear=True,
                        max_id=0
                    ))
                    await self.client.send_message(utils.get_chat_id(message), self.strings('fuck_off', message))
                else:
                    await self.client.send_message(utils.get_chat_id(message), self.strings('fuck_off', message))
            except:
                pass

            await self.client(telethon.tl.functions.contacts.BlockRequest(
                id=entity
            ))
        else:
            await self.client.delete_dialog(entity)
