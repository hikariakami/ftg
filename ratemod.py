"""
    Copyright 2021 t.me/hikariakami
    Licensed under the Apache License, Version 2.0
    
    Author is not responsible for any consequencies caused by using this
    software or any of its parts. If you have any questions or wishes, feel
    free to contact Dan by sending pm to @hikari_alt.
"""

#<3 title: RateMod
#<3 pic: https://img.icons8.com/fluency/48/000000/heart-with-pulse.png
#<3 desc: –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ü–µ–Ω–∫—É –º–æ–¥—É–ª—è

from .. import loader, utils
import requests
import re
import hashlib

URL_REGEX = r'https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)'

@loader.tds
class RateModuleMod(loader.Module):
    strings = {
        "name": "RateMod", 
        'template': "üëÆ‚Äç‚ôÇÔ∏è <b>–û—Ü–µ–Ω–∫–∞ –º–æ–¥—É–ª—è </b><code>{}</code><b>:</b>\n{} {} <b>[{}]</b>\n\n{}", 
        'no_file': '<b>–ê –∫–∞–∫–æ–π –º–æ–¥—É–ª—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å?... üóø</b>', 
        'cannot_check_file': '<b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>'
    }

    async def client_ready(self, client, db):
        self.client = client

    @loader.unrestricted
    async def ratemodcmd(self, message):
        """<reply_to_file|file|link> - –û—Ü–µ–Ω–∏—Ç—å –∫–æ–¥, –∞ —Ç–∞–∫–∂–µ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –≤ –∫–æ–¥–µ"""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        if not reply and not getattr(reply, 'media', None) and not getattr(message, 'media', None) and not args and not re.match(URL_REGEX, args):
            return await utils.answer(message, self.strings('no_file'))

        checking = getattr(reply, 'media', None) if getattr(reply, 'media', None) is not None else (getattr(message, 'media', None) if getattr(message, 'media', None) is not None else (args if args and re.match(URL_REGEX, args) else 0))
        if type(checking) is int:
            return await utils.answer(message, self.strings('no_file'))

        if type(checking) is not str:
            try:
                file = await self.client.download_file(getattr(reply, 'media', None) if getattr(reply, 'media', None) is not None else getattr(message, 'media', None))
            except:
                return await utils.answer(message, self.strings('cannot_check_file', message))

            try:
                code = file.decode('utf-8').replace('\r\n', '\n')
            except:
                return await utils.answer(message, self.strings('cannot_check_file', message))

        else:
            try:
                code = (await utils.run_sync(requests.get, args)).text
            except:
                return await utils.answer(message, self.strings('cannot_check_file', message))

        try:
            mod_name = re.search(r"""strings[ ]*=[ ]*{.*?name['"]:[ ]*['"](.*?)['"]""", code, flags=re.S).group(1)
        except:
            mod_name = "Unknown"

        import_regex = [r'^[^#]rom ([^\n\r]*) import [^\n\r]*$', r'^[^#]mport ([^\n\r]*)[^\n\r]*$', r"""__import__[(]['"]([^'"]*)['"][)]"""]
        imports = [re.findall(import_re, code, flags=re.M | re.DOTALL) for import_re in import_regex]

        if '..' in imports: del imports[imports.index('..')]

        splitted = [_ for _ in list(
            zip(
                list(
                    map(lambda x: len(re.findall(r'[ \t]+(if|elif|else).+:', x)),
                        re.split(r'[ \t]*async def .*?cmd\(', code)
                    )
                ),
                [''] + re.findall(r'[ \t]*async def (.*?)cmd\(', code)
            )
        ) if _[0] > 10]

        comments = ""

        score = 4.6
        if len(imports) > 10:
            comments += f"üîª <code>{{-0.1}}</code> <b>–ë–æ–ª—å—à–æ–µ –∫–æ–ª-–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ({len(imports)}) </b><i>[–∑–∞–Ω–∏–º–∞–µ—Ç –ø–∞–º—è—Ç—å]</i>\n"
            score -= .1
        if 'requests' in imports and 'utils.run_sync' not in code:
            comments += "üîª <code>{-0.5}</code> <b>–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã</b> <i>[–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ]</i>\n"
            score -= .5
        if 'while True' in code or 'while 1' in code:
            comments += "üîª <code>{-0.1}</code> <b>–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª</b> <i>[–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ*]</i>\n"
            score -= .1
        if '.edit(' in code:
            comments += "üîª <code>{-0.3}</code> <b>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ message.edit</b> <i>[–º–æ–¥—É–ª—å –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–≤–∏–Ω–∫–æ–≤]</i>\n"
            score -= .3
        if re.search(r'@.*?[bB][oO][tT]', code) is not None:
            bots = ' | '.join(re.findall(r'@.*?[bB][oO][tT]', code))
            comments += f"üîª <code>{{-0.2}}</code> <b>–ë–æ—Ç-–∞–±—å—é–∑ (</b><code>{bots}</code><b>)</b> <i>[–º–æ–¥—É–ª—å —É–º—Ä–µ—Ç –≤–º–µ—Å—Ç–µ —Å –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –±–æ—Ç–æ–º]</i>\n"
            score -= .2
        if re.search(r'[ \t]+async def .*?cmd.*\n[ \t]+[^\'" \t]', code) is not None:
            undoc = ' | '.join(
                list(
                    re.findall(r'[ \t]+async def (.*?)cmd.*\n[ \t]+[^" \t]', code)
                )
            )

            comments += f"üîª <code>{{-0.4}}</code> <b>–ù–µ—Ç –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–æ–≤ (</b><code>{undoc}</code><b>)</b> <i>[–≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã]</i>\n"
            score -= .4
        if 'time.sleep' in code or 'from time import sleep' in code:
            comments += "üîª <code>{-0.5}</code> <b>–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–æ–Ω (</b><code>time.sleep</code><b>) –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ (</b><code>await asyncio.sleep</code><b>)</b> <i>[–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ]</i>\n"
            score -= .5
        if [_ for _ in code.split('\n') if len(_) > 300]:
            ll = max(len(_) for _ in code.split('\n') if len(_) > 300)
            comments += f"üîª <code>{{-0.1}}</code> <b>–î–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ ({ll})</b> <i>[–≤–ª–∏—è–µ—Ç –Ω–∞ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å]</i>\n"
            score -= .1
        if re.search(r'[\'"] ?\+ ?.*? ?\+ ?[\'"]', code) is not None:
            comments += "üîª <code>{-0.1}</code> <b>–ò–∑–±–µ–≥–∞–Ω–∏–µ f-—Å—Ç—Ä–æ–∫</b> <i>[–≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã, –≤–ª–∏—è–µ—Ç –Ω–∞ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å]</i>\n"
            score -= .1
        if splitted:
            comments += f"üîª <code>{{-0.2}}</code> <b>–ë–æ–ª—å—à–∏–µ 'if' –¥–µ—Ä–µ–≤—å—è (</b><code>{' | '.join([f'{chain} –≤ {fun}' for chain, fun in splitted])}</code><b>)</b> <i>[–≤–ª–∏—è–µ—Ç –Ω–∞ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ]</i>\n"
            score -= .2
        if '== None' in code or '==None' in code:
            comments += 'üîª <code>{-0.3}</code> <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —á–µ—Ä–µ–∑ ==</b> <i>[–≤–ª–∏—è–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞, –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã]</i>\n'

            score -= .3
        if 'is not None else' in code:
            comments += 'üîª <code>{-0.1}</code> <b>–ù–µ—É–º–µ—Å—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä–Ω–∞—Ä–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (</b><code>if some_var is not None else another</code> <b>-></b> <code>some_var or another</code><b>)</b> <i>[–≤–ª–∏—è–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞]</i>\n'

            score -= .1
        if 'utils.answer' in code and '.edit(' not in code:
            comments += "üî∏ <code>{+0.3}</code> <b>utils.answer</b> <i>[—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–≤–∏–Ω–∫–∞–º–∏]</i>\n"
            score += .3
        if re.search(r'[ \t]+async def .*?cmd.*\n[ \t]+[^\'" \t]', code) is None:
            comments += "üî∏ <code>{+0.3}</code> <b>–î–æ–∫—Å—Ç—Ä–∏–Ω–≥–∏</b> <i>[–≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã]</i>\n"
            score += .3
        if 'requests' in imports and 'utils.run_sync' in code or 'aiohttp' in imports:
            comments += "üî∏ <code>{+0.3}</code> <b>–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã</b> <i>[–Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ]</i>\n"
            score += .3


        api_endpoint = 'https://hikariakami.ru/ftg/mods/check?hash='
        sha1 = hashlib.sha1()
        sha1.update(code.encode('utf-8'))
        try:
            check_res = (await utils.run_sync(requests.get, api_endpoint + str(sha1.hexdigest()))).text
        except:
            check_res = ""

        if check_res in {'yes', 'db'}:
            comments += "üî∏ <code>{+1.0}</code> <b>–ú–æ–¥—É–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω</b> <i>[–≤ –Ω–µ–º –Ω–µ—Ç —Å–∫–∞–º–∞]</i>\n"
            score += 1.0

        score = round(score, 1)

        score = min(score, 5.)
        await utils.answer(message, self.strings('template').format(mod_name, '‚≠êÔ∏è' * round(score), score, ['–ì–æ–≤–Ω–∏—â–µ', '–û—á–µ–Ω—å –ø–ª–æ—Ö–æ', '–ü–ª–æ—Ö–æ', '–ö –ø–∏–≤—É –ø–æ–π–¥–µ—Ç', '–ù–æ—Ä–º–∞–ª—å–Ω–æ', '–ß–µ—Ç–∫–æ'][round(score)], comments))
